const express = require('express');
const router = express.Router();
const FamilyLicense = require('../models/FamilyLicense');
const { hashPassword } = require('../utils/password');

// POST /api/family-license/create - Criar licen√ßa ap√≥s pagamento
router.post('/create', async (req, res) => {
  try {
    console.log('üöÄ CRIANDO LICEN√áA FAM√çLIA');
    console.log('üìã Dados recebidos:', req.body);

    const { planData, paymentData, purchaserData } = req.body;

    // Validar dados obrigat√≥rios
    if (!planData || !planData.numParents || !planData.numStudents) {
      return res.status(400).json({
        error: 'Dados do plano s√£o obrigat√≥rios',
        code: 'MISSING_PLAN_DATA'
      });
    }

    if (!paymentData || !paymentData.transactionId) {
      return res.status(400).json({
        error: 'Dados de pagamento s√£o obrigat√≥rios',
        code: 'MISSING_PAYMENT_DATA'
      });
    }

    // Gerar c√≥digo √∫nico da licen√ßa
    const licenseCode = FamilyLicense.generateLicenseCode();
    console.log('üîë C√≥digo da licen√ßa gerado:', licenseCode);

    // Criar licen√ßa
    const familyLicense = new FamilyLicense({
      licenseCode,
      planData: {
        numParents: planData.numParents,
        numStudents: planData.numStudents,
        totalPrice: planData.totalPrice
      },
      status: 'paid',
      payment: {
        transactionId: paymentData.transactionId,
        paymentMethod: paymentData.paymentMethod || 'credit_card',
        paidAt: new Date(),
        amount: planData.totalPrice
      },
      purchaser: {
        email: purchaserData?.email,
        name: purchaserData?.name,
        phone: purchaserData?.phone
      }
    });

    // Gerar licen√ßas individuais para os respons√°veis
    familyLicense.generateIndividualLicenses();
    console.log('üìã Licen√ßas individuais geradas:', familyLicense.generatedLicenses.length);

    await familyLicense.save();
    console.log('‚úÖ Licen√ßa fam√≠lia salva com sucesso:', familyLicense._id);

    res.status(201).json({
      success: true,
      licenseCode: familyLicense.licenseCode,
      individualLicenses: familyLicense.generatedLicenses,
      availableTokens: familyLicense.availableTokens,
      message: 'Licen√ßa fam√≠lia criada com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro ao criar licen√ßa fam√≠lia:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao criar licen√ßa',
      code: 'INTERNAL_ERROR'
    });
  }
});

// GET /api/family-license/validate/:licenseCode - Validar c√≥digo de licen√ßa
router.get('/validate/:licenseCode', async (req, res) => {
  try {
    console.log('üîç VALIDANDO LICEN√áA FAM√çLIA');
    console.log('üìã C√≥digo:', req.params.licenseCode);

    const { licenseCode } = req.params;
    const cleanCode = licenseCode.toUpperCase().trim();

    // Buscar licen√ßa
    const familyLicense = await FamilyLicense.findOne({ 
      licenseCode: cleanCode 
    });

    if (!familyLicense) {
      console.log('‚ùå Licen√ßa n√£o encontrada');
      return res.status(404).json({
        error: 'C√≥digo de licen√ßa inv√°lido',
        code: 'LICENSE_NOT_FOUND'
      });
    }

    // Verificar se a licen√ßa √© v√°lida
    if (!familyLicense.isValid()) {
      console.log('‚ùå Licen√ßa inv√°lida ou expirada');
      return res.status(400).json({
        error: 'Licen√ßa inv√°lida ou expirada',
        code: 'LICENSE_INVALID'
      });
    }

    // Verificar se ainda h√° licen√ßas individuais dispon√≠veis
    const availableLicenses = familyLicense.generatedLicenses.filter(
      license => license.status === 'available'
    );

    if (availableLicenses.length === 0) {
      console.log('‚ùå Todas as licen√ßas j√° foram utilizadas');
      return res.status(400).json({
        error: 'Todas as licen√ßas j√° foram utilizadas',
        code: 'ALL_LICENSES_USED'
      });
    }

    console.log('‚úÖ Licen√ßa v√°lida encontrada');
    res.json({
      success: true,
      valid: true,
      availableLicenses: availableLicenses.length,
      planData: familyLicense.planData,
      message: 'Licen√ßa v√°lida'
    });

  } catch (error) {
    console.error('‚ùå Erro ao validar licen√ßa:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao validar licen√ßa',
      code: 'INTERNAL_ERROR'
    });
  }
});

// POST /api/family-license/use - Usar licen√ßa individual para registro
router.post('/use', async (req, res) => {
  try {
    console.log('üéØ USANDO LICEN√áA INDIVIDUAL');
    console.log('üìã Dados recebidos:', req.body);

    const { licenseCode, userData } = req.body;

    if (!licenseCode || !userData) {
      return res.status(400).json({
        error: 'C√≥digo de licen√ßa e dados do usu√°rio s√£o obrigat√≥rios',
        code: 'MISSING_DATA'
      });
    }

    // Buscar licen√ßa fam√≠lia
    const familyLicense = await FamilyLicense.findOne({ 
      licenseCode: licenseCode.toUpperCase().trim() 
    });

    if (!familyLicense || !familyLicense.isValid()) {
      return res.status(400).json({
        error: 'Licen√ßa inv√°lida',
        code: 'LICENSE_INVALID'
      });
    }

    // Encontrar licen√ßa individual dispon√≠vel
    const availableLicense = familyLicense.generatedLicenses.find(
      license => license.status === 'available'
    );

    if (!availableLicense) {
      return res.status(400).json({
        error: 'Todas as licen√ßas j√° foram utilizadas',
        code: 'ALL_LICENSES_USED'
      });
    }

    // Marcar licen√ßa individual como usada
    availableLicense.status = 'used';
    availableLicense.usedAt = new Date();

    await familyLicense.save();
    console.log('‚úÖ Licen√ßa individual marcada como usada');

    res.json({
      success: true,
      individualLicenseCode: availableLicense.licenseCode,
      message: 'Licen√ßa validada com sucesso. Voc√™ pode prosseguir com o registro.'
    });

  } catch (error) {
    console.error('‚ùå Erro ao usar licen√ßa:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao usar licen√ßa',
      code: 'INTERNAL_ERROR'
    });
  }
});

// GET /api/family-license/:licenseCode/tokens - Obter tokens dispon√≠veis
router.get('/:licenseCode/tokens', async (req, res) => {
  try {
    const { licenseCode } = req.params;
    
    const familyLicense = await FamilyLicense.findOne({ 
      licenseCode: licenseCode.toUpperCase().trim() 
    });

    if (!familyLicense) {
      return res.status(404).json({
        error: 'Licen√ßa n√£o encontrada',
        code: 'LICENSE_NOT_FOUND'
      });
    }

    res.json({
      success: true,
      availableTokens: familyLicense.availableTokens,
      usedTokens: familyLicense.generatedTokens.filter(t => t.status === 'used').length,
      totalTokens: familyLicense.planData.numStudents
    });

  } catch (error) {
    console.error('‚ùå Erro ao obter tokens:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

module.exports = router;

