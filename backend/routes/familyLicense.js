const express = require('express');
const router = express.Router();
const FamilyLicense = require('../models/FamilyLicense');
const { hashPassword } = require('../utils/password');
const { authenticateToken } = require('../middleware/auth');

// POST /api/family-license/create - Criar licen√ßa ap√≥s pagamento
router.post('/create', async (req, res) => {
  try {
    console.log('üöÄ CRIANDO LICEN√áA FAM√çLIA');
    console.log('üìã Dados recebidos:', req.body);

    const { planData, paymentData, purchaserData } = req.body;

    // Validar dados obrigat√≥rios
    if (!planData || !planData.numParents || !planData.numStudents) {
      return res.status(400).json({
        error: 'Dados do plano s√£o obrigat√≥rios',
        code: 'MISSING_PLAN_DATA'
      });
    }

    // Validar limite de alunos (m√°ximo 3)
    if (planData.numStudents > 3) {
      return res.status(400).json({
        error: 'M√°ximo de 3 alunos permitidos no Plano Fam√≠lia',
        code: 'TOO_MANY_STUDENTS'
      });
    }

    if (!paymentData || !paymentData.transactionId) {
      return res.status(400).json({
        error: 'Dados de pagamento s√£o obrigat√≥rios',
        code: 'MISSING_PAYMENT_DATA'
      });
    }

    // Gerar c√≥digo √∫nico da licen√ßa
    const licenseCode = FamilyLicense.generateLicenseCode();
    console.log('üîë C√≥digo da licen√ßa gerado:', licenseCode);

    // Criar licen√ßa
    const familyLicense = new FamilyLicense({
      licenseCode,
      planData: {
        numParents: planData.numParents,
        numStudents: planData.numStudents,
        totalPrice: planData.totalPrice
      },
      status: 'paid',
      maxUsages: planData.numParents, // Limite baseado no n√∫mero de respons√°veis
      payment: {
        transactionId: paymentData.transactionId,
        paymentMethod: paymentData.paymentMethod || 'credit_card',
        paidAt: new Date(),
        amount: planData.totalPrice
      },
      purchaser: {
        email: purchaserData?.email,
        name: purchaserData?.name,
        phone: typeof purchaserData?.phone === 'object' ? (purchaserData.phone?.number || null) : (purchaserData?.phone || null)
      }
    });

    // Gerar licen√ßas individuais para os respons√°veis
    familyLicense.generateIndividualLicenses();
    console.log('üìã Licen√ßas individuais geradas:', familyLicense.generatedLicenses.length);

    await familyLicense.save();
    console.log('‚úÖ Licen√ßa fam√≠lia salva com sucesso:', familyLicense._id);

    res.status(201).json({
      success: true,
      licenseCode: familyLicense.licenseCode,
      individualLicenses: familyLicense.generatedLicenses,
      availableTokens: familyLicense.availableTokens,
      message: 'Licen√ßa fam√≠lia criada com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro ao criar licen√ßa fam√≠lia:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao criar licen√ßa',
      code: 'INTERNAL_ERROR'
    });
  }
});

// GET /api/family-license/validate/:licenseCode - Validar c√≥digo de licen√ßa
router.get('/validate/:licenseCode', async (req, res) => {
  try {
    console.log('üîç VALIDANDO LICEN√áA FAM√çLIA');
    console.log('üìã C√≥digo:', req.params.licenseCode);

    const { licenseCode } = req.params;
    const cleanCode = licenseCode.toUpperCase().trim();

    // üîß MODO DESENVOLVIMENTO: Buscar dados reais do MongoDB mesmo para c√≥digos simulados
    if (cleanCode.startsWith('FAM-')) {
      console.log('üîß MODO DESENVOLVIMENTO: Buscando dados reais para:', cleanCode);
      
      // Buscar licen√ßa real no MongoDB
      const familyLicense = await FamilyLicense.findOne({ 
        licenseCode: cleanCode 
      });
      
      if (familyLicense) {
        console.log('‚úÖ Licen√ßa real encontrada no MongoDB');
        console.log('üìã PlanData:', familyLicense.planData);
        return res.json({
          success: true,
          valid: true,
          license: {
            code: cleanCode,
            planData: familyLicense.planData,
            status: 'paid',
            isSimulated: false
          },
          message: 'C√≥digo real aceito em desenvolvimento'
        });
      } else {
        console.log('‚ö†Ô∏è Licen√ßa n√£o encontrada no MongoDB, usando fallback');
        return res.json({
          success: true,
          valid: true,
          license: {
            code: cleanCode,
            planData: {
              numParents: 1,
              numStudents: 1,
              totalPrice: 19.90
            },
            status: 'paid',
            isSimulated: true
          },
          message: 'C√≥digo simulado aceito em desenvolvimento (fallback)'
        });
      }
    }

    // Buscar licen√ßa
    const familyLicense = await FamilyLicense.findOne({ 
      licenseCode: cleanCode 
    });

    if (!familyLicense) {
      console.log('‚ùå Licen√ßa n√£o encontrada');
      return res.status(404).json({
        error: 'C√≥digo de licen√ßa inv√°lido',
        code: 'LICENSE_NOT_FOUND'
      });
    }

    // Verificar se a licen√ßa √© v√°lida
    if (!familyLicense.isValid()) {
      console.log('‚ùå Licen√ßa inv√°lida ou expirada');
      return res.status(400).json({
        error: 'Licen√ßa inv√°lida ou expirada',
        code: 'LICENSE_INVALID'
      });
    }

    // Verificar se ainda h√° licen√ßas individuais dispon√≠veis
    const availableLicenses = familyLicense.generatedLicenses.filter(
      license => license.status === 'available'
    );

    if (availableLicenses.length === 0) {
      console.log('‚ùå Todas as licen√ßas j√° foram utilizadas');
      return res.status(400).json({
        error: 'Todas as licen√ßas j√° foram utilizadas',
        code: 'ALL_LICENSES_USED'
      });
    }

    console.log('‚úÖ Licen√ßa v√°lida encontrada');
    res.json({
      success: true,
      valid: true,
      availableLicenses: availableLicenses.length,
      planData: familyLicense.planData,
      message: 'Licen√ßa v√°lida'
    });

  } catch (error) {
    console.error('‚ùå Erro ao validar licen√ßa:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao validar licen√ßa',
      code: 'INTERNAL_ERROR'
    });
  }
});

// POST /api/family-license/use - Usar licen√ßa individual para registro
router.post('/use', async (req, res) => {
  try {
    console.log('üéØ USANDO LICEN√áA INDIVIDUAL');
    console.log('üìã Dados recebidos:', req.body);

    const { licenseCode, userData } = req.body;

    if (!licenseCode || !userData) {
      return res.status(400).json({
        error: 'C√≥digo de licen√ßa e dados do usu√°rio s√£o obrigat√≥rios',
        code: 'MISSING_DATA'
      });
    }

    // üîß MODO DESENVOLVIMENTO: Buscar dados reais do MongoDB
    if (licenseCode.startsWith('FAM-')) {
      console.log('üîß MODO DESENVOLVIMENTO: Buscando dados reais para uso:', licenseCode);
      
      // Buscar licen√ßa real no MongoDB
      const familyLicense = await FamilyLicense.findOne({ 
        licenseCode: licenseCode.toUpperCase().trim() 
      });
      
      if (familyLicense) {
        console.log('‚úÖ Licen√ßa real encontrada para uso');
        console.log('üìã PlanData:', familyLicense.planData);
        console.log('üîç Verificando uso da licen√ßa:', {
          usageCount: familyLicense.usageCount,
          maxUsages: familyLicense.maxUsages,
          canBeUsed: familyLicense.canBeUsed()
        });
        
        // Verificar se a licen√ßa pode ser usada
        if (!familyLicense.canBeUsed()) {
          console.log('‚ùå Licen√ßa j√° foi utilizada o n√∫mero m√°ximo de vezes:', {
            usageCount: familyLicense.usageCount,
            maxUsages: familyLicense.maxUsages
          });
          return res.status(400).json({
            error: 'Licen√ßa j√° foi utilizada o n√∫mero m√°ximo de vezes',
            code: 'LICENSE_MAX_USAGE_REACHED'
          });
        }
        
        // Incrementar contador de uso ANTES de retornar
        familyLicense.usageCount += 1;
        await familyLicense.save();
        console.log('‚úÖ Licen√ßa pode ser usada, contador incrementado:', {
          usageCount: familyLicense.usageCount,
          maxUsages: familyLicense.maxUsages
        });
        
        return res.json({
          success: true,
          individualLicenseCode: licenseCode,
          planData: familyLicense.planData, // ‚úÖ DADOS REAIS
          message: 'Licen√ßa real aceita em desenvolvimento'
        });
      } else {
        console.log('‚ö†Ô∏è Licen√ßa n√£o encontrada no MongoDB, usando fallback');
        return res.json({
          success: true,
          individualLicenseCode: licenseCode,
          planData: {
            numParents: 1,
            numStudents: 1,
            totalPrice: 19.90
          },
          message: 'Licen√ßa simulada aceita em desenvolvimento (fallback)'
        });
      }
    }

    // Buscar licen√ßa fam√≠lia
    const familyLicense = await FamilyLicense.findOne({ 
      licenseCode: licenseCode.toUpperCase().trim() 
    });

    if (!familyLicense || !familyLicense.isValid()) {
      return res.status(400).json({
        error: 'Licen√ßa inv√°lida',
        code: 'LICENSE_INVALID'
      });
    }

    // Encontrar licen√ßa individual dispon√≠vel
    const availableLicense = familyLicense.generatedLicenses.find(
      license => license.status === 'available'
    );

    if (!availableLicense) {
      return res.status(400).json({
        error: 'Todas as licen√ßas j√° foram utilizadas',
        code: 'ALL_LICENSES_USED'
      });
    }

    // Marcar licen√ßa individual como usada
    availableLicense.status = 'used';
    availableLicense.usedAt = new Date();

    await familyLicense.save();
    console.log('‚úÖ Licen√ßa individual marcada como usada');

    res.json({
      success: true,
      individualLicenseCode: availableLicense.licenseCode,
      planData: familyLicense.planData, // Incluir dados do plano
      message: 'Licen√ßa validada com sucesso. Voc√™ pode prosseguir com o registro.'
    });

  } catch (error) {
    console.error('‚ùå Erro ao usar licen√ßa:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao usar licen√ßa',
      code: 'INTERNAL_ERROR'
    });
  }
});

// GET /api/family-license/:licenseCode/tokens - Obter tokens dispon√≠veis
router.get('/:licenseCode/tokens', async (req, res) => {
  try {
    const { licenseCode } = req.params;
    
    const familyLicense = await FamilyLicense.findOne({ 
      licenseCode: licenseCode.toUpperCase().trim() 
    });

    if (!familyLicense) {
      return res.status(404).json({
        error: 'Licen√ßa n√£o encontrada',
        code: 'LICENSE_NOT_FOUND'
      });
    }

    res.json({
      success: true,
      availableTokens: familyLicense.availableTokens,
      usedTokens: familyLicense.generatedTokens.filter(t => t.status === 'used').length,
      totalTokens: familyLicense.planData.numStudents
    });

  } catch (error) {
    console.error('‚ùå Erro ao obter tokens:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// GET /api/family-license/check-token-permission/:licenseCode - Verificar se usu√°rio pode gerar tokens
router.get('/check-token-permission/:licenseCode', authenticateToken, async (req, res) => {
  try {
    const { licenseCode } = req.params;
    const userId = req.user?.id; // Assumindo que o middleware de auth j√° foi aplicado

    console.log('üîç Verificando permiss√£o de tokens:', { licenseCode, userId });

    if (!userId) {
      return res.status(401).json({
        error: 'Usu√°rio n√£o autenticado',
        code: 'UNAUTHORIZED'
      });
    }

    // Buscar a licen√ßa
    const familyLicense = await FamilyLicense.findOne({
      licenseCode: licenseCode.toUpperCase().trim()
    });

    if (!familyLicense) {
      return res.status(404).json({
        error: 'Licen√ßa n√£o encontrada',
        code: 'LICENSE_NOT_FOUND'
      });
    }

    // Verificar se o usu√°rio est√° associado a esta licen√ßa
    const userAssociated = familyLicense.usedBy.some(user => user.userId.toString() === userId);
    
    if (!userAssociated) {
      return res.status(403).json({
        error: 'Usu√°rio n√£o associado a esta licen√ßa',
        code: 'USER_NOT_ASSOCIATED'
      });
    }

    // Para licen√ßas com 1 respons√°vel, sempre pode gerar tokens
    if (familyLicense.planData.numParents === 1) {
      return res.json({
        canGenerateTokens: true,
        reason: 'Licen√ßa com 1 respons√°vel'
      });
    }

    // Para licen√ßas com 2 respons√°veis, apenas o primeiro pode gerar tokens
    if (familyLicense.planData.numParents === 2) {
      // Verificar se o usu√°rio √© o primeiro a usar a licen√ßa
      // O primeiro usu√°rio √© aquele que foi associado primeiro (menor √≠ndice no array)
      const userIndex = familyLicense.usedBy.findIndex(user => user.userId.toString() === userId);
      const isFirstUser = userIndex === 0;

      console.log('üîç Verifica√ß√£o de permiss√£o:', {
        numParents: familyLicense.planData.numParents,
        userIndex,
        isFirstUser,
        usedBy: familyLicense.usedBy.length
      });

      return res.json({
        canGenerateTokens: isFirstUser,
        reason: isFirstUser ? 'Primeiro respons√°vel' : 'Segundo respons√°vel - apenas o primeiro pode gerar tokens'
      });
    }

    // Fallback: permitir por padr√£o
    return res.json({
      canGenerateTokens: true,
      reason: 'Licen√ßa padr√£o'
    });

  } catch (error) {
    console.error('‚ùå Erro ao verificar permiss√£o de tokens:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

module.exports = router;

