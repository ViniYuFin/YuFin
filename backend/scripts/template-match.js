require('dotenv').config({ path: '../.env' });
const mongoose = require('mongoose');
const Lesson = require('../models/Lesson');

mongoose.connect(process.env.MONGODB_URI);

async function createMatchTemplate() {
  try {
    console.log('üéØ CRIANDO TEMPLATE MATCH PERSONALIZADO');
    console.log('='.repeat(60));
    
    // Lista das li√ß√µes de Match para atualizar
    const matchLessons = [
      { 
        title: 'Tipos de Poupan√ßa', 
        gradeId: '7¬∫ Ano', 
        type: 'association',
      scenario: {
        title: "Tipos de Poupan√ßa",
          description: "Voc√™ est√° aprendendo sobre diferentes tipos de poupan√ßa e suas caracter√≠sticas. Conecte cada tipo com suas principais caracter√≠sticas!"
        },
        items: [
          { text: "Poupan√ßa Tradicional", correctCategory: "Rendimento Baixo" },
          { text: "Poupan√ßa Digital", correctCategory: "Rendimento Baixo" },
          { text: "CDB", correctCategory: "Rendimento M√©dio" },
          { text: "LCI/LCA", correctCategory: "Rendimento M√©dio" },
          { text: "Tesouro Selic", correctCategory: "Rendimento M√©dio" },
          { text: "A√ß√µes", correctCategory: "Rendimento Alto" }
        ],
        categories: [
          { name: "Rendimento Baixo", description: "Rendimento menor, mas mais seguro" },
          { name: "Rendimento M√©dio", description: "Rendimento equilibrado com seguran√ßa" },
          { name: "Rendimento Alto", description: "Maior potencial de rendimento, mas com risco" }
        ]
      },
      { 
        title: 'Tipos de Investimentos (poupan√ßa, CDB, tesouro)', 
        gradeId: '8¬∫ Ano', 
        type: 'memory',
        scenario: {
          title: "Jogo da Mem√≥ria - Investimentos",
          description: "Encontre os pares corretos entre tipos de investimentos e suas caracter√≠sticas principais!"
        },
        pairs: [
          {
            card1: { text: "Poupan√ßa", type: "investimento" },
            card2: { text: "Rendimento baixo e seguro", type: "caracteristica" }
          },
          {
            card1: { text: "CDB", type: "investimento" },
            card2: { text: "Certificado de Dep√≥sito Banc√°rio", type: "caracteristica" }
          },
          {
            card1: { text: "Tesouro Selic", type: "investimento" },
            card2: { text: "T√≠tulo do governo federal", type: "caracteristica" }
          },
          {
            card1: { text: "LCI", type: "investimento" },
            card2: { text: "Letra de Cr√©dito Imobili√°rio", type: "caracteristica" }
          },
          {
            card1: { text: "LCA", type: "investimento" },
            card2: { text: "Letra de Cr√©dito do Agroneg√≥cio", type: "caracteristica" }
          },
          {
            card1: { text: "A√ß√µes", type: "investimento" },
            card2: { text: "Participa√ß√£o em empresas", type: "caracteristica" }
          }
        ]
      }
    ];
    
    for (const lessonData of matchLessons) {
      console.log(`\nüîç Processando: ${lessonData.title}`);
      
      // Buscar a li√ß√£o
      const lesson = await Lesson.findOne({ 
        title: lessonData.title,
        gradeId: lessonData.gradeId 
      });
      
      if (!lesson) {
        console.log(`‚ùå Li√ß√£o "${lessonData.title}" n√£o encontrada`);
        continue;
      }
      
      console.log('üìã Li√ß√£o encontrada:', lesson.title);
      console.log('üìä S√©rie:', lesson.gradeId);
      console.log('üéØ Tipo:', lesson.type);
      
      // Criar estrutura baseada no tipo de match
      let newMatchStructure;
      
      if (lessonData.type === 'association') {
        // ESTRUTURA PARA ASSOCIA√á√ÉO
        newMatchStructure = {
          scenario: lessonData.scenario.description,
          items: lessonData.items,
          categories: lessonData.categories,
          gameType: 'association',
          instructions: [
            "Conecte cada tipo de poupan√ßa com sua categoria de rendimento",
            "Clique em um item e depois na categoria correspondente",
            "Complete todas as associa√ß√µes para finalizar"
          ],
          feedback: {
            correct: "Correto! Voc√™ associou corretamente o tipo de poupan√ßa com sua caracter√≠stica.",
            incorrect: "Tente novamente! Pense nas caracter√≠sticas de cada tipo de poupan√ßa.",
            complete: "Parab√©ns! Voc√™ entendeu os diferentes tipos de poupan√ßa e suas caracter√≠sticas!"
          }
        };
      } else {
        // ESTRUTURA PARA JOGO DA MEM√ìRIA
        newMatchStructure = {
          scenario: lessonData.scenario.description,
          gameFormat: 'memory',
          gameConfig: {
            format: 'memory',
            type: 'memory-game',
            difficulty: 'medium'
          },
          title: lessonData.scenario.title,
          description: lessonData.scenario.description,
          instructions: [
            "Clique nas cartas para vir√°-las e encontrar os pares corretos",
            "Voc√™ tem 12 pares para encontrar",
            "Tente lembrar onde voc√™ viu cada termo ou defini√ß√£o"
          ],
          pairs: lessonData.pairs.map(pair => ({
            left: pair.card1.text,
            right: pair.card2.text,
            explanation: `Correto! ${pair.card1.text} √© ${pair.card2.text}`,
            educationalTip: `Dica: ${pair.card1.text} √© um tipo de investimento que ${pair.card2.text.toLowerCase()}`
          })),
          maxAttempts: 18,
          timeLimit: 240,
          scoring: {
            perfect: 120,
            good: 96,
            average: 72
          },
          feedback: {
            success: "Parab√©ns! Voc√™ encontrou todos os pares!",
            partial: "Bom trabalho! Continue tentando encontrar os pares restantes.",
            hint: "Dica: Tente lembrar onde voc√™ viu cada termo ou defini√ß√£o."
          }
        };
      }
      
      // Atualizar a li√ß√£o
      lesson.content = newMatchStructure;
      lesson.updatedAt = new Date();
      
      await lesson.save();
      
      console.log(`‚úÖ Template ${lessonData.type} criado com sucesso para: ${lesson.title}`);
      console.log(`üéÆ Tipo de jogo: ${lessonData.type}`);
      console.log(`‚è±Ô∏è Tempo estimado: 10-15 minutos`);
    }
    
    console.log('\nüéØ RESUMO DOS TEMPLATES CRIADOS:');
    console.log('================================');
    console.log('‚úÖ Tipos de Poupan√ßa - Associa√ß√£o');
    console.log('‚úÖ Tipos de Investimentos - Jogo da Mem√≥ria');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('   1. Testar as li√ß√µes no frontend');
    console.log('   2. Validar componente MatchLesson.jsx');
    console.log('   3. Ajustar se necess√°rio');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar templates match:', error);
  } finally {
    mongoose.connection.close();
  }
}

createMatchTemplate();