const mongoose = require('mongoose');
require('dotenv').config();

// Schema simplificado para Lesson
const lessonSchema = new mongoose.Schema({
  title: String,
  type: String,
  content: mongoose.Schema.Types.Mixed
}, { strict: false });

const Lesson = mongoose.model('Lesson', lessonSchema);

async function investigateSpecificLessons() {
  try {
    console.log('üîç INVESTIGANDO LI√á√ïES ESPEC√çFICAS');
    console.log('===============================================');
    
    // Conectar ao MongoDB
    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://Vinicius:081023%40Jeova@cluster0.ow4ruvq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';
    
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');
    
    // IDs das li√ß√µes espec√≠ficas
    const lessonIds = [
      '68bf16663f2074bcdd61d1d6', // O Or√ßamento da Fam√≠lia
      '68b5f074206075fecfe052aa'  // Previd√™ncia e Aposentadoria (ID correto)
    ];
    
    for (const lessonId of lessonIds) {
      console.log(`\nüìã INVESTIGANDO LI√á√ÉO: ${lessonId}`);
      console.log('===============================================');
      
      const lesson = await Lesson.findById(lessonId);
      
      if (!lesson) {
        console.log('‚ùå Li√ß√£o n√£o encontrada!');
        continue;
      }
      
      console.log(`üìñ T√≠tulo: ${lesson.title}`);
      console.log(`üìù Tipo: ${lesson.type}`);
      console.log(`üéì S√©rie: ${lesson.grade || 'N√£o especificada'}`);
      
      if (lesson.content) {
        console.log('\nüìä ESTRUTURA DO CONTE√öDO:');
        console.log('===============================================');
        
        // Verificar se tem cen√°rios
        if (lesson.content.scenarios) {
          console.log(`üé≠ Cen√°rios: ${lesson.content.scenarios.length}`);
          lesson.content.scenarios.forEach((scenario, index) => {
            console.log(`   ${index + 1}. ${scenario.title}`);
            console.log(`      ID: ${scenario.id}`);
            console.log(`      Descri√ß√£o: ${scenario.description}`);
            if (scenario.adjustments) {
              console.log(`      Ajustes: ${Object.keys(scenario.adjustments).join(', ')}`);
            }
            if (scenario.opportunities) {
              console.log(`      Oportunidades: ${scenario.opportunities.length}`);
            }
          });
        }
        
        // Verificar categorias
        if (lesson.content.categories) {
          console.log(`\nüè∑Ô∏è  Categorias: ${lesson.content.categories.length}`);
          lesson.content.categories.forEach((category, index) => {
            console.log(`   ${index + 1}. ${category.name} (ID: ${category.id})`);
            console.log(`      Grupo: ${category.group || 'N√£o especificado'}`);
            console.log(`      Prioridade: ${category.priority || 'N√£o especificada'}`);
            console.log(`      √çcone: ${category.icon || 'N√£o especificado'}`);
            console.log(`      Descri√ß√£o: ${category.description || 'N√£o especificada'}`);
          });
        }
        
        // Verificar or√ßamento total
        if (lesson.content.totalBudget) {
          console.log(`\nüí∞ Or√ßamento Total: R$ ${lesson.content.totalBudget}`);
        } else if (lesson.content.budget) {
          console.log(`\nüí∞ Or√ßamento: R$ ${lesson.content.budget}`);
        } else if (lesson.content.gameConfig?.totalBudget) {
          console.log(`\nüí∞ Or√ßamento (gameConfig): R$ ${lesson.content.gameConfig.totalBudget}`);
        }
        
        // Verificar se tem configura√ß√µes especiais
        if (lesson.content.gameConfig) {
          console.log(`\n‚öôÔ∏è  Configura√ß√µes do Jogo:`);
          console.log(`   Total Budget: ${lesson.content.gameConfig.totalBudget || 'N√£o especificado'}`);
          console.log(`   Outras configs: ${Object.keys(lesson.content.gameConfig).join(', ')}`);
        }
      }
      
      console.log('\n' + '='.repeat(50));
    }
    
    console.log('\n‚úÖ Investiga√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro ao investigar li√ß√µes:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado do MongoDB');
  }
}

// Executar o script
investigateSpecificLessons();
