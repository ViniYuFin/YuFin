/**
 * üìä SCRIPT DE CRIA√á√ÉO DE √çNDICES OTIMIZADOS
 * 
 * Cria √≠ndices para melhorar performance de queries
 * Rode este script uma vez ap√≥s deploy: node scripts/create-indexes.js
 */

require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../models/User');
const Lesson = require('../models/Lesson');
const RefreshToken = require('../models/RefreshToken');
const Class = require('../models/Class');
const Grade = require('../models/Grade');
const RegistrationToken = require('../models/RegistrationToken');

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/yufin';

async function createIndexes() {
  try {
    console.log('üîå Conectando ao MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB\n');

    // ===========================
    // √çNDICES DE USERS
    // ===========================
    console.log('üìä Criando √≠ndices de Users...');
    
    // √çndice √∫nico para email (j√° existe no schema, mas garantir)
    await User.collection.createIndex({ email: 1 }, { unique: true });
    console.log('  ‚úÖ email (unique)');
    
    // √çndice √∫nico para playerId
    await User.collection.createIndex({ playerId: 1 }, { unique: true, sparse: true });
    console.log('  ‚úÖ playerId (unique, sparse)');
    
    // √çndice composto para role + schoolId (queries de escolas)
    await User.collection.createIndex({ role: 1, schoolId: 1 });
    console.log('  ‚úÖ role + schoolId');
    
    // √çndice para gradeId (filtrar por s√©rie)
    await User.collection.createIndex({ gradeId: 1 });
    console.log('  ‚úÖ gradeId');
    
    // √çndice para classId (filtrar por turma)
    await User.collection.createIndex({ classId: 1 });
    console.log('  ‚úÖ classId');
    
    // √çndice para buscar por XP (rankings)
    await User.collection.createIndex({ 'progress.totalXp': -1 });
    console.log('  ‚úÖ progress.totalXp (desc)');
    
    // √çndice para buscar por n√≠vel
    await User.collection.createIndex({ 'progress.level': -1 });
    console.log('  ‚úÖ progress.level (desc)');
    
    // √çndice para buscar por streak
    await User.collection.createIndex({ 'progress.currentStreak': -1 });
    console.log('  ‚úÖ progress.currentStreak (desc)');
    
    // √çndice para √∫ltima atividade (limpar usu√°rios inativos)
    await User.collection.createIndex({ 'progress.lastActivityDate': 1 });
    console.log('  ‚úÖ progress.lastActivityDate');
    
    // √çndice para progress√£o de s√©rie
    await User.collection.createIndex({ 
      'gradeProgression.nextGradeRequested': 1,
      'gradeProgression.nextGradeAuthorized': 1 
    });
    console.log('  ‚úÖ gradeProgression (requests)');

    // ===========================
    // √çNDICES DE LESSONS
    // ===========================
    console.log('\nüìö Criando √≠ndices de Lessons...');
    
    // √çndice composto para gradeId + module
    await Lesson.collection.createIndex({ gradeId: 1, module: 1 });
    console.log('  ‚úÖ gradeId + module');
    
    // √çndice para ordem dentro do m√≥dulo
    await Lesson.collection.createIndex({ gradeId: 1, module: 1, order: 1 });
    console.log('  ‚úÖ gradeId + module + order');
    
    // √çndice para tipo de li√ß√£o
    await Lesson.collection.createIndex({ type: 1 });
    console.log('  ‚úÖ type');
    
    // √çndice para li√ß√µes ativas
    await Lesson.collection.createIndex({ isActive: 1 });
    console.log('  ‚úÖ isActive');
    
    // √çndice para dificuldade
    await Lesson.collection.createIndex({ difficulty: 1 });
    console.log('  ‚úÖ difficulty');

    // ===========================
    // √çNDICES DE REFRESH TOKENS
    // ===========================
    console.log('\nüîë Criando √≠ndices de RefreshTokens...');
    
    // √çndice √∫nico para token
    await RefreshToken.collection.createIndex({ token: 1 }, { unique: true });
    console.log('  ‚úÖ token (unique)');
    
    // √çndice para userId
    await RefreshToken.collection.createIndex({ userId: 1 });
    console.log('  ‚úÖ userId');
    
    // √çndice composto para buscar tokens v√°lidos
    await RefreshToken.collection.createIndex({ 
      userId: 1, 
      isRevoked: 1,
      expiresAt: 1
    });
    console.log('  ‚úÖ userId + isRevoked + expiresAt');
    
    // TTL index para expira√ß√£o autom√°tica (expira em 0 segundos ap√≥s expiresAt)
    try {
      await RefreshToken.collection.createIndex(
        { expiresAt: 1 }, 
        { expireAfterSeconds: 0 }
      );
      console.log('  ‚úÖ expiresAt (TTL)');
    } catch (error) {
      if (error.code === 85) {
        console.log('  ‚ö†Ô∏è  expiresAt (TTL) - j√° existe (OK)');
      } else {
        throw error;
      }
    }
    
    // √çndice para IP (an√°lise de seguran√ßa)
    await RefreshToken.collection.createIndex({ 'deviceInfo.ip': 1 });
    console.log('  ‚úÖ deviceInfo.ip');

    // ===========================
    // √çNDICES DE CLASSES
    // ===========================
    console.log('\nüè´ Criando √≠ndices de Classes...');
    
    // √çndice para schoolId
    await Class.collection.createIndex({ schoolId: 1 });
    console.log('  ‚úÖ schoolId');
    
    // √çndice composto para school + grade
    await Class.collection.createIndex({ schoolId: 1, grade: 1 });
    console.log('  ‚úÖ schoolId + grade');
    
    // √çndice para turmas ativas
    await Class.collection.createIndex({ 'settings.isActive': 1 });
    console.log('  ‚úÖ settings.isActive');

    // ===========================
    // √çNDICES DE GRADES
    // ===========================
    console.log('\nüéì Criando √≠ndices de Grades...');
    
    // √çndice para name (busca por nome de s√©rie)
    await Grade.collection.createIndex({ name: 1 });
    console.log('  ‚úÖ name');
    
    // √çndice para level (ordem das s√©ries)
    await Grade.collection.createIndex({ level: 1 });
    console.log('  ‚úÖ level');
    
    // √çndice para s√©ries ativas
    await Grade.collection.createIndex({ isActive: 1 });
    console.log('  ‚úÖ isActive');

    // ===========================
    // √çNDICES DE REGISTRATION TOKENS
    // ===========================
    console.log('\nüéüÔ∏è Criando √≠ndices de RegistrationTokens...');
    
    // √çndice √∫nico para token
    await RegistrationToken.collection.createIndex({ token: 1 }, { unique: true });
    console.log('  ‚úÖ token (unique)');
    
    // √çndice para createdBy
    await RegistrationToken.collection.createIndex({ createdBy: 1 });
    console.log('  ‚úÖ createdBy');
    
    // √çndice composto para buscar tokens v√°lidos
    await RegistrationToken.collection.createIndex({ 
      isActive: 1,
      expiresAt: 1
    });
    console.log('  ‚úÖ isActive + expiresAt');
    
    // √çndice para schoolId
    await RegistrationToken.collection.createIndex({ schoolId: 1 });
    console.log('  ‚úÖ schoolId');

    // ===========================
    // VERIFICAR √çNDICES CRIADOS
    // ===========================
    console.log('\nüìä Verificando √≠ndices criados...\n');
    
    const collections = {
      'Users': User.collection,
      'Lessons': Lesson.collection,
      'RefreshTokens': RefreshToken.collection,
      'Classes': Class.collection,
      'Grades': Grade.collection,
      'RegistrationTokens': RegistrationToken.collection
    };
    
    for (const [name, collection] of Object.entries(collections)) {
      const indexes = await collection.indexes();
      console.log(`üìö ${name}:`);
      indexes.forEach(idx => {
        const keys = Object.keys(idx.key).join(', ');
        const options = [];
        if (idx.unique) options.push('unique');
        if (idx.sparse) options.push('sparse');
        if (idx.expireAfterSeconds !== undefined) options.push(`TTL:${idx.expireAfterSeconds}s`);
        console.log(`  ‚Ä¢ ${keys}${options.length ? ` (${options.join(', ')})` : ''}`);
      });
      console.log('');
    }

    console.log('‚úÖ Todos os √≠ndices foram criados com sucesso!\n');
    console.log('üí° Dicas de performance:');
    console.log('   - √çndices melhoram SELECT mas podem desacelerar INSERT/UPDATE');
    console.log('   - MongoDB usa no m√°ximo 1 √≠ndice por query');
    console.log('   - Monitore uso com: db.collection.explain()');
    console.log('   - Remova √≠ndices n√£o usados periodicamente\n');

  } catch (error) {
    console.error('‚ùå Erro ao criar √≠ndices:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üëã Desconectado do MongoDB');
    process.exit(0);
  }
}

// Executar
createIndexes();

