import React, { useState, useEffect, useMemo } from 'react';
import LessonLayout from './LessonLayout';

const BudgetDistributionLesson = ({ lesson, onComplete, onExit }) => {
  const [allocatedBudgets, setAllocatedBudgets] = useState({});
  const [timeSpent, setTimeSpent] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const [isCorrect, setIsCorrect] = useState(false);
  const [selectedScenario, setSelectedScenario] = useState(null);
  const [completedScenarios, setCompletedScenarios] = useState(new Set());
  const [scenarioResults, setScenarioResults] = useState({});
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    // Carregar prefer√™ncia do modo escuro
    const savedDarkMode = localStorage.getItem('darkMode') === 'true';
    setDarkMode(savedDarkMode);

    // Listener para mudan√ßas no modo escuro
    const handleDarkModeChange = () => {
      const savedDarkMode = localStorage.getItem('darkMode') === 'true';
      setDarkMode(savedDarkMode);
    };

    window.addEventListener('darkModeChanged', handleDarkModeChange);
    
    return () => {
      window.removeEventListener('darkModeChanged', handleDarkModeChange);
    };
  }, []);

  // Extrair or√ßamento total da estrutura da li√ß√£o
  const getTotalBudget = () => {
    // Se tiver cen√°rio selecionado, usar o or√ßamento do cen√°rio
    if (selectedScenario?.totalBudget) {
      return selectedScenario.totalBudget;
    }
    
    // Se tiver gameConfig.totalBudget, usar
    if (lesson.content?.gameConfig?.totalBudget) {
      return lesson.content.gameConfig.totalBudget;
    }
    
    // Se tiver totalBudget direto, usar
    if (lesson.content?.totalBudget) {
      return lesson.content.totalBudget;
    }
    
    // Se tiver budget direto, usar
    if (lesson.content?.budget) {
      return lesson.content.budget;
    }
    
    // Fallback: tentar extrair do scenario
    if (lesson.content?.scenario) {
      const match = lesson.content.scenario.match(/R\$ (\d+),00/);
      return match ? parseInt(match[1]) : 5000;
    }
    
    return 5000; // Valor padr√£o
  };

  const totalBudget = getTotalBudget();

  // Aplicar ajustes do cen√°rio selecionado
  const getAdjustedCategory = (category) => {
    if (!selectedScenario || !selectedScenario.adjustments) {
      return category;
    }

    const adjustment = selectedScenario.adjustments[category.id];
    if (!adjustment) {
      return category;
    }

    return {
      ...category,
      suggestedAmount: Math.round(category.suggestedAmount * adjustment.multiplier),
      suggestedPercentage: Math.round(category.suggestedPercentage * adjustment.multiplier)
    };
  };

  // Agrupar categorias por tipo baseado no cen√°rio selecionado (memoizado)
  const categoryGroups = useMemo(() => {
    if (!selectedScenario || !lesson.content?.categories) return {};

    // Li√ß√µes que devem usar card √∫nico (mais avan√ßadas, sem divis√£o Necessidades/Desejos)
    const singleCardLessons = [
      "Or√ßamento de Viagem",           // 6¬∫ Ano - Foco em planejamento de viagem
      "Meu Primeiro Or√ßamento",        // 7¬∫ Ano - Or√ßamento pessoal simples
      "An√°lise de fluxo de caixa",     // 9¬∫ Ano - An√°lise empresarial
      "Gest√£o de risco de portf√≥lio"   // 2¬∫ Ano EM - Investimentos
    ];
    
    if (singleCardLessons.includes(lesson.title)) {
      const cardConfig = {
        "Or√ßamento de Viagem": { label: 'Planejamento', icon: '‚úàÔ∏è' },
        "Meu Primeiro Or√ßamento": { label: 'Meu Or√ßamento', icon: 'üí∞' },
        "An√°lise de fluxo de caixa": { label: 'Fluxo de Caixa', icon: 'üìä' },
        "Gest√£o de risco de portf√≥lio": { label: 'Portf√≥lio', icon: 'üìà' }
      };
      
      const config = cardConfig[lesson.title];
      const groups = {
        single: { categories: [], total: 0, maxTotal: 0, label: config.label, icon: config.icon }
      };
      
      // Adicionar todas as categorias ao grupo √∫nico
      lesson.content.categories.forEach(category => {
        const allocated = allocatedBudgets[category.name] || 0;
        groups.single.categories.push({ ...category, allocated });
        groups.single.total += allocated;
      });
      
      // Definir limite total do or√ßamento
      groups.single.maxTotal = totalBudget;
      
      return groups;
    }

    const groups = {
      necessidades: { categories: [], total: 0, maxTotal: 0, label: 'Necessidades', icon: 'üè†' },
      desejos: { categories: [], total: 0, maxTotal: 0, label: 'Desejos/Lazer', icon: 'üéØ' },
      poupanca: { categories: [], total: 0, maxTotal: 0, label: 'Poupan√ßa/Investimentos', icon: 'üí∞' },
      doacoes: { categories: [], total: 0, maxTotal: 0, label: 'Doa√ß√µes/Legado', icon: 'ü§ù' }
    };

    // Definir grupos baseado nos adjustments do cen√°rio selecionado
    if (selectedScenario.adjustments) {
      // Usar os adjustments do cen√°rio selecionado
      Object.keys(selectedScenario.adjustments).forEach(grupoKey => {
        const ajuste = selectedScenario.adjustments[grupoKey];
        const porcentagem = ajuste.maxPercentage / 100;
        
        if (grupoKey === 'Necessidades') {
          groups.necessidades.maxTotal = Math.round(totalBudget * porcentagem);
        } else if (grupoKey === 'Desejos/Lazer') {
          groups.desejos.maxTotal = Math.round(totalBudget * porcentagem);
        } else if (grupoKey === 'Poupan√ßa/Investimentos') {
          groups.poupanca.maxTotal = Math.round(totalBudget * porcentagem);
        } else if (grupoKey === 'Doa√ß√µes/Legado') {
          groups.doacoes.maxTotal = Math.round(totalBudget * porcentagem);
        }
      });
    } else {
      // Fallback para li√ß√µes sem adjustments (usar m√©todo padr√£o 50/30/20)
      groups.necessidades.maxTotal = Math.round(totalBudget * 0.5); // 50%
      groups.desejos.maxTotal = Math.round(totalBudget * 0.3); // 30%
      groups.poupanca.maxTotal = Math.round(totalBudget * 0.2); // 20%
    }

    // Classificar categorias nos grupos
    lesson.content.categories.forEach(category => {
      const allocated = allocatedBudgets[category.name] || 0;
      
      // Para "O Or√ßamento da Fam√≠lia", sempre classificar baseado no nome da categoria
      if (lesson.title === "O Or√ßamento da Fam√≠lia") {
        if (['alimentacao', 'moradia', 'transporte', 'saude'].includes(category.id)) {
          groups.necessidades.categories.push({ ...category, allocated });
          groups.necessidades.total += allocated;
        } else if (['educacao', 'lazer'].includes(category.id)) {
          groups.desejos.categories.push({ ...category, allocated });
          groups.desejos.total += allocated;
        } else {
          // Qualquer outra categoria vai para poupan√ßa/investimentos
          groups.poupanca.categories.push({ ...category, allocated });
          groups.poupanca.total += allocated;
        }
      } else if (selectedScenario.adjustments && category.group) {
        // Para outras li√ß√µes com adjustments, usar o grupo da categoria
        if (category.group === 'Necessidades') {
          groups.necessidades.categories.push({ ...category, allocated });
          groups.necessidades.total += allocated;
        } else if (category.group === 'Desejos/Lazer') {
          groups.desejos.categories.push({ ...category, allocated });
          groups.desejos.total += allocated;
        } else if (category.group === 'Poupan√ßa/Investimentos') {
          groups.poupanca.categories.push({ ...category, allocated });
          groups.poupanca.total += allocated;
        } else if (category.group === 'Doa√ß√µes/Legado') {
          groups.doacoes.categories.push({ ...category, allocated });
          groups.doacoes.total += allocated;
        }
      } else if (!selectedScenario.adjustments) {
        // Para outras li√ß√µes sem adjustments, classificar por prioridade ou nome
        if (category.priority === 'high' || ['alimentacao', 'moradia', 'transporte', 'saude', 'educacao', 'hospedagem', 'necessidades', 'essenciais', 'operacional'].includes(category.id)) {
          groups.necessidades.categories.push({ ...category, allocated });
          groups.necessidades.total += allocated;
        } else if (category.priority === 'medium' || ['lazer', 'atracoes', 'brinquedos', 'presentes', 'marketing', 'pesquisa'].includes(category.id)) {
          groups.desejos.categories.push({ ...category, allocated });
          groups.desejos.total += allocated;
        } else if (category.priority === 'low' || ['poupanca', 'investimentos', 'reserva', 'emergencia', 'renda-fixa', 'acoes', 'fundos', 'alternativos'].includes(category.id)) {
          groups.poupanca.categories.push({ ...category, allocated });
          groups.poupanca.total += allocated;
        } else {
          // Fallback: adicionar ao grupo de necessidades
          groups.necessidades.categories.push({ ...category, allocated });
          groups.necessidades.total += allocated;
        }
      }
    });

    // Para "O Or√ßamento da Fam√≠lia", garantir que sempre tenha uma categoria de poupan√ßa/investimentos
    if (lesson.title === "O Or√ßamento da Fam√≠lia" && groups.poupanca.categories.length === 0) {
      const poupancaCategory = {
        id: 'poupanca',
        name: 'Poupan√ßa/Investimentos',
        description: 'Reserva de emerg√™ncia, investimentos e poupan√ßa',
        icon: 'üí∞',
        priority: 'low',
        group: 'Poupan√ßa/Investimentos',
        allocated: allocatedBudgets['Poupan√ßa/Investimentos'] || 0
      };
      groups.poupanca.categories.push(poupancaCategory);
      groups.poupanca.total += poupancaCategory.allocated;
    }

    // Para "O Or√ßamento da Fam√≠lia", substituir todas as categorias de poupan√ßa por "Investimentos"
    if (lesson.title === "O Or√ßamento da Fam√≠lia") {
      // Limpar categorias existentes de poupan√ßa
      groups.poupanca.categories = [];
      groups.poupanca.total = 0;
      
      // Adicionar apenas a categoria "Investimentos"
      const investimentosCategory = {
        id: 'investimentos',
        name: 'Investimentos',
        description: 'Poupan√ßa, investimentos, reserva',
        icon: 'üìà',
        priority: 'low',
        group: 'Poupan√ßa/Investimentos',
        allocated: allocatedBudgets['Investimentos'] || 0
      };
      groups.poupanca.categories.push(investimentosCategory);
      groups.poupanca.total += investimentosCategory.allocated;
    }
    
    // Para "Previd√™ncia e Aposentadoria", garantir que as categorias apare√ßam
    if (lesson.title === "Previd√™ncia e Aposentadoria") {
      // Se n√£o h√° categorias em nenhum grupo, adicionar categorias padr√£o
      const totalCategories = Object.values(groups).reduce((sum, group) => sum + group.categories.length, 0);
      
      if (totalCategories === 0) {
        // Adicionar categorias padr√£o para Previd√™ncia e Aposentadoria
        const previdenciaCategories = [
          {
            id: 'previdencia',
            name: 'Previd√™ncia',
            description: 'Contribui√ß√µes para aposentadoria',
            icon: 'üè¶',
            priority: 'high',
            group: 'Necessidades',
            allocated: allocatedBudgets['Previd√™ncia'] || 0
          },
          {
            id: 'aposentadoria',
            name: 'Aposentadoria',
            description: 'Reserva para aposentadoria',
            icon: 'üë¥',
            priority: 'high',
            group: 'Necessidades',
            allocated: allocatedBudgets['Aposentadoria'] || 0
          }
        ];
        
        previdenciaCategories.forEach(category => {
          groups.necessidades.categories.push(category);
          groups.necessidades.total += category.allocated;
        });
      }
    }

    return groups;
  }, [selectedScenario, allocatedBudgets, totalBudget, lesson.content?.categories]);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeSpent(prev => prev + 1);
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const handleBudgetChange = (categoryName, value) => {
    // Permitir campo vazio durante digita√ß√£o
    if (value === '' || value === null || value === undefined) {
      setAllocatedBudgets(prev => ({
        ...prev,
        [categoryName]: 0
      }));
      return;
    }
    
    // Converter para n√∫mero, mas manter o valor exato digitado
    const numValue = parseInt(value, 10);
    
    // S√≥ atualizar se for um n√∫mero v√°lido
    if (!isNaN(numValue) && numValue >= 0) {
      setAllocatedBudgets(prev => ({
        ...prev,
        [categoryName]: numValue
      }));
    }
  };

  const handleSubmit = () => {
    const totalAllocated = Object.values(allocatedBudgets).reduce((sum, value) => sum + value, 0);
    const isWithinBudget = totalAllocated <= totalBudget && totalAllocated > 0;
    
    // Verificar crit√©rios de sucesso baseados nos grupos
    const groups = categoryGroups;
    let isPerfect = true;
    let groupViolations = [];
    let emptyCategories = [];
    
    // Verificar se cada categoria tem pelo menos R$ 1,00
    Object.entries(groups).forEach(([groupKey, group]) => {
      group.categories.forEach(category => {
        if (!category.allocated || category.allocated < 1) {
          isPerfect = false;
          emptyCategories.push(category.name);
        }
      });
    });
    
    // Verificar se cada grupo est√° dentro dos limites
    const multipleGroupLessons = [
      "Or√ßamento familiar avan√ßado", 
      "Planejamento financeiro pessoal",
      "Planejamento financeiro familiar avan√ßado",
      "Planejamento financeiro corporativo",
      "Planejamento financeiro estrat√©gico"
    ];
    
    if (selectedScenario?.adjustments || multipleGroupLessons.includes(lesson.title)) {
      Object.entries(groups).forEach(([groupKey, group]) => {
        if (group.maxTotal > 0 && group.total > group.maxTotal) {
          isPerfect = false;
          groupViolations.push(`${group.label} (R$ ${group.total} > R$ ${group.maxTotal})`);
        }
      });
    }
    
    // Para li√ß√µes de card √∫nico, verificar se n√£o excedeu o or√ßamento total
    const singleCardLessons = [
      "Or√ßamento de Viagem",
      "Meu Primeiro Or√ßamento", 
      "An√°lise de fluxo de caixa",
      "Gest√£o de risco de portf√≥lio",
      "Planejamento financeiro corporativo",
      "Planejamento financeiro estrat√©gico"
    ];
    
    if (singleCardLessons.includes(lesson.title) && totalAllocated > totalBudget) {
      isPerfect = false;
      const cardLabels = {
        "Or√ßamento de Viagem": "Planejamento",
        "Meu Primeiro Or√ßamento": "Meu Or√ßamento",
        "An√°lise de fluxo de caixa": "Fluxo de Caixa",
        "Gest√£o de risco de portf√≥lio": "Portf√≥lio",
        "Planejamento financeiro corporativo": "Or√ßamento Corporativo",
        "Planejamento financeiro estrat√©gico": "Estrat√©gia Financeira"
      };
      groupViolations.push(`${cardLabels[lesson.title]} (R$ ${totalAllocated} > R$ ${totalBudget})`);
    }
    
    // Verificar se usou pelo menos 90% do or√ßamento
    if (totalAllocated < totalBudget * 0.9) {
      isPerfect = false;
    }
    
    const correct = isWithinBudget && isPerfect;
    const score = correct ? 100 : Math.max(0, 100 - Math.abs(totalAllocated - totalBudget) * 2);
    
    setIsCorrect(correct);
    setShowFeedback(true);
    
    // Se o cen√°rio foi completado com sucesso, marcar como conclu√≠do
    if (correct && selectedScenario) {
      setCompletedScenarios(prev => new Set([...prev, selectedScenario.id]));
      setScenarioResults(prev => ({
        ...prev,
        [selectedScenario.id]: {
          scenario: selectedScenario,
          score,
          totalAllocated,
          groups
        }
      }));
    }
    
    // Feedback baseado na distribui√ß√£o por grupos
    if (correct) {
      if (lesson.content.scenarios && lesson.content.scenarios.length > 1) {
        const remainingScenarios = lesson.content.scenarios.filter(s => !completedScenarios.has(s.id) && s.id !== selectedScenario.id);
        if (remainingScenarios.length > 0) {
          setFeedbackMessage(`Excelente! Cen√°rio "${selectedScenario.title}" conclu√≠do! Ainda faltam ${remainingScenarios.length} cen√°rio(s) para completar a li√ß√£o.`);
        } else {
          setFeedbackMessage(`Parab√©ns! Voc√™ completou todos os cen√°rios! A li√ß√£o est√° conclu√≠da.`);
        }
      } else {
        setFeedbackMessage(`Excelente! Cen√°rio "${selectedScenario.title}" conclu√≠do! A li√ß√£o est√° conclu√≠da.`);
      }
    } else if (emptyCategories.length > 0) {
      setFeedbackMessage(`Voc√™ precisa alocar pelo menos R$ 1,00 em cada categoria! Categorias vazias: ${emptyCategories.join(', ')}`);
    } else if (totalAllocated > totalBudget) {
      setFeedbackMessage(`Voc√™ ultrapassou o or√ßamento! Distribuiu R$ ${totalAllocated.toLocaleString('pt-BR')},00 de R$ ${totalBudget.toLocaleString('pt-BR')},00. Tente reduzir alguns gastos.`);
    } else if (totalAllocated === 0) {
      setFeedbackMessage(`Voc√™ precisa distribuir o or√ßamento! Planeje como gastar os R$ ${totalBudget.toLocaleString('pt-BR')},00 entre as categorias.`);
    } else if (groupViolations.length > 0) {
      setFeedbackMessage(`Ajuste necess√°rio! Grupos que excederam o limite: ${groupViolations.join(', ')}`);
    } else if (selectedScenario?.adjustments) {
      setFeedbackMessage(`Voc√™ distribuiu R$ ${totalAllocated.toLocaleString('pt-BR')},00 de R$ ${totalBudget.toLocaleString('pt-BR')},00. Tente usar mais do or√ßamento dispon√≠vel!`);
    } else {
      setFeedbackMessage(`Excelente! Voc√™ distribuiu R$ ${totalAllocated.toLocaleString('pt-BR')},00 de R$ ${totalBudget.toLocaleString('pt-BR')},00. Distribui√ß√£o equilibrada!`);
    }
  };

  const handleContinue = () => {
    // Verificar se todos os cen√°rios foram completados
    const allScenariosCompleted = lesson.content.scenarios && lesson.content.scenarios.every(scenario => completedScenarios.has(scenario.id));
    
    if (allScenariosCompleted) {
      // Calcular score m√©dio de todos os cen√°rios
      const totalScore = Object.values(scenarioResults).reduce((sum, result) => sum + result.score, 0);
      const averageScore = totalScore / Object.keys(scenarioResults).length;
      
      onComplete({
        score: Math.round(averageScore),
        timeSpent,
        isPerfect: averageScore >= 90,
        feedback: `Li√ß√£o conclu√≠da! Voc√™ completou todos os ${lesson.content.scenarios.length} cen√°rio(s) com uma pontua√ß√£o m√©dia de ${Math.round(averageScore)} pontos.`,
        scenarioResults: scenarioResults
      });
    } else {
      // Limpar estado para pr√≥ximo cen√°rio
      setAllocatedBudgets({});
      setShowFeedback(false);
      setFeedbackMessage('');
      setIsCorrect(false);
      setSelectedScenario(null);
    }
  };

  const totalAllocated = Object.values(allocatedBudgets).reduce((sum, value) => sum + value, 0);
  const remaining = totalBudget - totalAllocated;

  return (
    <>
      <style>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        .animate-fadeIn {
          animation: fadeIn 0.5s ease-out;
        }
      `}</style>
      <LessonLayout
        title={lesson.title}
        timeSpent={timeSpent}
        onExit={onExit}
        icon="üí∞"
      >
        <div className="text-center mb-8">
          <h2 className="text-xl font-bold text-gray-800 mb-4">
            {lesson.content.scenario || 'Distribua o or√ßamento mensal da fam√≠lia'}
          </h2>
          <div className="text-gray-600 mb-6">
            {lesson.content.instructions && Array.isArray(lesson.content.instructions) ? (
              <ul className="text-left max-w-2xl mx-auto space-y-2">
                {lesson.content.instructions.map((instruction, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-primary mr-2">‚Ä¢</span>
                    <span>{instruction}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p>{lesson.content.instructions || 'Distribua o dinheiro entre as diferentes categorias respeitando os limites:'}</p>
            )}
          </div>
          
          {/* Seletor de Cen√°rios */}
          {lesson.content?.scenarios && lesson.content.scenarios.length > 0 && (
            <div className="mb-6">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-bold text-gray-800">Escolha um cen√°rio:</h3>
                <div className="text-sm text-gray-600">
                  Progresso: {completedScenarios.size}/{lesson.content.scenarios?.length || 0} cen√°rios
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                {lesson.content.scenarios.map((scenario, index) => {
                  const getScenarioColors = (classLevel) => {
                    // Usar cores uniformes para todos os cen√°rios
                    return {
                      selected: 'border-primary bg-primary/10 text-primary',
                      unselected: 'border-gray-200 bg-white hover:border-gray-300',
                      completed: 'border-green-500 bg-green-50 text-green-700'
                    };
                  };
                  
                  const colors = getScenarioColors(scenario.classLevel);
                  const isCompleted = completedScenarios.has(scenario.id);
                  const isSelected = selectedScenario?.id === scenario.id;
                  
                  return (
                    <button
                      key={scenario.id}
                      onClick={() => {
                        if (selectedScenario?.id === scenario.id) {
                          // Se clicou no mesmo cen√°rio, limpar sele√ß√£o
                          setSelectedScenario(null);
                          setAllocatedBudgets({});
                        } else {
                          // Se clicou em um cen√°rio diferente, selecionar
                          setSelectedScenario(scenario);
                        }
                      }}
                      className={`p-4 rounded-lg border-2 text-left transition-all h-full flex flex-col ${
                        isCompleted
                          ? colors.completed
                          : isSelected
                          ? colors.selected
                          : colors.unselected
                      }`}
                    >
                      <h4 className="font-bold text-sm mb-3 h-8 flex items-center">{scenario.title}</h4>
                      <div className="text-xs text-gray-600 space-y-2 flex-1">
                        <p className="font-medium leading-tight">{scenario.description.split(' - ')[0]}</p>
                        <p className="text-gray-500 leading-tight">{scenario.description.split(' - ')[1]}</p>
                      </div>
                      {isCompleted && (
                        <div className="mt-3 text-xs text-green-600 font-medium h-4 flex items-center">
                          Conclu√≠do
                        </div>
                      )}
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {/* Oportunidades Dispon√≠veis - s√≥ aparece quando cen√°rio est√° selecionado */}
          {selectedScenario && selectedScenario.opportunities && (
            <div 
              className="p-4 rounded-lg mb-6 border"
              style={{
                backgroundColor: darkMode ? '#374151' : '#f9fafb',
                borderColor: darkMode ? '#4b5563' : '#e5e7eb'
              }}
            >
              <h3 
                className="font-bold text-lg mb-3"
                style={{ color: darkMode ? '#ffffff' : '#1f2937' }}
              >
                üéØ Oportunidades Dispon√≠veis para {selectedScenario.title}
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {selectedScenario.opportunities.map((opportunity, index) => (
                  <div 
                    key={index} 
                    className="flex items-center text-sm"
                    style={{ color: darkMode ? '#e5e7eb' : '#374151' }}
                  >
                    <span className="mr-2">‚úì</span>
                    <span>{opportunity}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

        </div>

      <div className="space-y-6 mb-6">
        {selectedScenario && lesson.content?.categories && lesson.content.categories.length > 0 && (
          <div className="animate-fadeIn">
            {(() => {
              const groups = categoryGroups;
              return Object.entries(groups).map(([groupKey, group]) => {
                // Para "O Or√ßamento da Fam√≠lia", n√£o renderizar doa√ß√µes
                if (lesson.title === "O Or√ßamento da Fam√≠lia" && groupKey === 'doacoes') {
                  return null;
                }
                // Para "O Or√ßamento da Fam√≠lia", sempre renderizar os outros grupos
                if (lesson.title === "O Or√ßamento da Fam√≠lia") {
                  // Renderizar mesmo se estiver vazio
                } else if (group.categories.length === 0) {
                  return null;
                }
                
                const singleCardLessons = [
                  "Or√ßamento de Viagem",
                  "Meu Primeiro Or√ßamento", 
                  "An√°lise de fluxo de caixa",
                  "Gest√£o de risco de portf√≥lio"
                ];
                
                const multipleGroupLessons = [
                  "O Or√ßamento da Fam√≠lia",
                  "Or√ßamento familiar avan√ßado", 
                  "Planejamento financeiro pessoal",
                  "Planejamento financeiro familiar avan√ßado",
                  "Planejamento financeiro corporativo",
                  "Planejamento financeiro estrat√©gico"
                ];
                
                const groupColor = (lesson.title === "O Or√ßamento da Fam√≠lia") ? 'border-gray-200 bg-white' :
                                 (selectedScenario?.adjustments && group.total > group.maxTotal) ? 'border-red-300 bg-red-50' : 
                                 (selectedScenario?.adjustments && group.total === group.maxTotal) ? 'border-green-300 bg-green-50' : 
                                 (multipleGroupLessons.includes(lesson.title) && group.total > group.maxTotal) ? 'border-red-300 bg-red-50' :
                                 (multipleGroupLessons.includes(lesson.title) && group.total === group.maxTotal) ? 'border-green-300 bg-green-50' :
                                 (singleCardLessons.includes(lesson.title) && group.total > group.maxTotal) ? 'border-red-300 bg-red-50' :
                                 'border-gray-200 bg-white';
                
                return (
                  <div 
                    key={groupKey} 
                    className={`p-6 rounded-xl border-2 transition-all duration-300 hover:shadow-lg`}
                    style={{
                      backgroundColor: darkMode ? '#374151' : '#ffffff',
                      borderColor: darkMode ? '#4b5563' : '#e5e7eb'
                    }}
                  >
                    {/* Header do Grupo */}
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center">
                        <span className="text-3xl mr-4">{group.icon}</span>
                        <div>
                          <h3 
                            className="text-xl font-bold"
                            style={{ color: darkMode ? '#ffffff' : '#1f2937' }}
                          >
                            {group.label}
                          </h3>
                          <div className="flex items-center space-x-2 mt-1">
                            <span 
                              className="text-sm"
                              style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}
                            >
                              R$ {group.total.toLocaleString('pt-BR')},00
                            </span>
                            {(() => {
                              const singleCardLessons = [
                                "Or√ßamento de Viagem",
                                "Meu Primeiro Or√ßamento", 
                                "An√°lise de fluxo de caixa",
                                "Gest√£o de risco de portf√≥lio",
                                "Planejamento financeiro corporativo",
                                "Planejamento financeiro estrat√©gico"
                              ];
                              
                              const multipleGroupLessons = [
                                "O Or√ßamento da Fam√≠lia",
                                "Or√ßamento familiar avan√ßado", 
                                "Planejamento financeiro pessoal",
                                "Planejamento financeiro familiar avan√ßado",
                                "Planejamento financeiro corporativo",
                                "Planejamento financeiro estrat√©gico"
                              ];
                              
                              if (lesson.title === "O Or√ßamento da Fam√≠lia" ||
                                  singleCardLessons.includes(lesson.title) || 
                                  multipleGroupLessons.includes(lesson.title) || 
                                  selectedScenario?.adjustments) {
                                return (
                                  <>
                                    <span className="text-gray-400">/</span>
                                    <span 
                                      className="text-sm font-semibold"
                                      style={{ color: darkMode ? '#ffffff' : '#1f2937' }}
                                    >
                                      R$ {group.maxTotal.toLocaleString('pt-BR')},00
                                    </span>
                                  </>
                                );
                              }
                              return null;
                            })()}
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`px-3 py-1 rounded-full text-sm font-bold ${
                          (lesson.title === "O Or√ßamento da Fam√≠lia") ? 'bg-gray-100 text-gray-700' :
                          (selectedScenario?.adjustments && group.total > group.maxTotal) ? 'bg-red-100 text-red-700' : 
                          (selectedScenario?.adjustments && group.total === group.maxTotal) ? 'bg-green-100 text-green-700' : 
                          (multipleGroupLessons.includes(lesson.title) && group.total > group.maxTotal) ? 'bg-red-100 text-red-700' :
                          (multipleGroupLessons.includes(lesson.title) && group.total === group.maxTotal) ? 'bg-green-100 text-green-700' :
                          (singleCardLessons.includes(lesson.title) && group.total > group.maxTotal) ? 'bg-red-100 text-red-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {(lesson.title === "O Or√ßamento da Fam√≠lia") ? 'Dispon√≠vel' :
                           (selectedScenario?.adjustments && group.total > group.maxTotal) ? 'Excedeu' : 
                           (selectedScenario?.adjustments && group.total === group.maxTotal) ? 'Perfeito' : 
                           (multipleGroupLessons.includes(lesson.title) && group.total > group.maxTotal) ? 'Excedeu' :
                           (multipleGroupLessons.includes(lesson.title) && group.total === group.maxTotal) ? 'Perfeito' :
                           (singleCardLessons.includes(lesson.title) && group.total > group.maxTotal) ? 'Excedeu' :
                           'Dispon√≠vel'}
                        </div>
                      </div>
                    </div>
                    
                    {/* Categorias do Grupo */}
                    <div className="space-y-4">
                      {group.categories.map((category, index) => (
                        <div 
                          key={index} 
                          className={`p-4 rounded-lg border transition-colors ${
                            (!category.allocated || category.allocated < 1) 
                              ? 'border-red-300' 
                              : 'hover:border-gray-300'
                          }`}
                          style={{
                            backgroundColor: (!category.allocated || category.allocated < 1) 
                              ? (darkMode ? '#7f1d1d' : '#fef2f2')
                              : (darkMode ? '#4b5563' : '#ffffff'),
                            borderColor: (!category.allocated || category.allocated < 1) 
                              ? '#dc2626'
                              : (darkMode ? '#6b7280' : '#e5e7eb')
                          }}
                        >
                          <div className="flex items-center space-x-4 mb-3">
                            <span className="text-2xl">{category.icon}</span>
                            <div className="flex-1">
                              <h4 
                                className="font-semibold"
                                style={{ color: darkMode ? '#ffffff' : '#1f2937' }}
                              >
                                {category.name}
                              </h4>
                              <p 
                                className="text-sm mt-1"
                                style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}
                              >
                                {category.description}
                              </p>
                              {(!category.allocated || category.allocated < 1) && (
                                <p 
                                  className="text-xs mt-1 font-medium"
                                  style={{ color: '#dc2626' }}
                                >
                                  M√≠nimo: R$ 1,00
                                </p>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span 
                              className="font-medium"
                              style={{ color: darkMode ? '#ffffff' : '#374151' }}
                            >
                              R$
                            </span>
                            <input
                              type="number"
                              min="0"
                              step="1"
                              value={category.allocated || ''}
                              onChange={(e) => handleBudgetChange(category.name, e.target.value)}
                              className={`w-32 px-3 py-2 border-2 rounded-lg focus:outline-none text-right font-medium ${
                                (!category.allocated || category.allocated < 1)
                                  ? 'border-red-300 focus:border-red-500'
                                  : 'border-gray-300 focus:border-primary'
                              }`}
                              style={{
                                backgroundColor: darkMode ? '#374151' : '#ffffff',
                                color: darkMode ? '#ffffff' : '#1f2937'
                              }}
                              placeholder="1"
                            />
                            <span 
                              className="font-medium"
                              style={{ color: darkMode ? '#ffffff' : '#374151' }}
                            >
                              ,00
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              });
            })()}
          </div>
        )}
      </div>

      {/* Resumo do Or√ßamento - s√≥ aparece quando cen√°rio est√° selecionado */}
      {selectedScenario && (
        <div 
          className="mb-6 p-4 rounded-lg border"
          style={{
            backgroundColor: darkMode ? '#374151' : '#f9fafb',
            borderColor: darkMode ? '#4b5563' : '#e5e7eb'
          }}
        >
          <div className="flex justify-between items-center">
            <span 
              className="text-sm font-medium"
              style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}
            >
              Total Distribu√≠do:
            </span>
            <span className={`font-bold text-lg ${totalAllocated > totalBudget ? 'text-red-600' : 'text-green-600'}`}>
              R$ {totalAllocated.toLocaleString('pt-BR')},00
            </span>
          </div>
          <div className="flex justify-between items-center mt-1">
            <span 
              className="text-sm font-medium"
              style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}
            >
              Or√ßamento Total:
            </span>
            <span 
              className="font-bold text-lg"
              style={{ color: darkMode ? '#ffffff' : '#1f2937' }}
            >
              R$ {totalBudget.toLocaleString('pt-BR')},00
            </span>
          </div>
          {remaining !== 0 && (
            <div className="flex justify-between items-center mt-1">
              <span 
                className="text-sm font-medium"
                style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}
              >
                Restante:
              </span>
              <span className={`font-bold text-lg ${remaining < 0 ? 'text-red-600' : 'text-blue-600'}`}>
                R$ {remaining.toLocaleString('pt-BR')},00
              </span>
            </div>
          )}
        </div>
      )}

      {showFeedback && (
        <div className={`p-4 rounded-lg mb-6 text-center ${isCorrect ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
          <div className="text-2xl mb-2">{isCorrect ? 'üéâ' : 'üí°'}</div>
          <p className="font-semibold">{feedbackMessage}</p>
        </div>
      )}

      {selectedScenario && (
        !showFeedback ? (
          <button
            onClick={handleSubmit}
            disabled={totalAllocated === 0}
            className={`w-full py-3 rounded-lg font-bold text-lg transition-colors ${
              totalAllocated === 0 
                ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
                : 'bg-primary text-white hover:bg-primary-dark'
            }`}
          >
            Verificar Planejamento
          </button>
        ) : (
          <button
            onClick={handleContinue}
            className="w-full bg-primary text-white py-3 rounded-lg font-bold text-lg hover:bg-primary-dark transition-colors"
          >
            {lesson.content.scenarios && lesson.content.scenarios.every(scenario => completedScenarios.has(scenario.id)) 
              ? 'Concluir Li√ß√£o' 
              : 'Pr√≥ximo Cen√°rio'
            }
          </button>
        )
      )}
      </LessonLayout>
    </>
  );
};

export default BudgetDistributionLesson;



